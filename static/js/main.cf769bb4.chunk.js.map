{"version":3,"sources":["assets/EmojiWeatherMapEmojiLoading.svg","Context/ApiBaseUrlContext.js","Components/EmojiWeatherMapSelector.js","Components/EmojiWeatherMapSettings.js","Components/EmojiWeatherMapOffset.js","Components/EmojiWeatherMapEmoji.js","Components/EmojiWeatherMapRow.js","Components/EmojiWeatherMap.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ApiBaseUrlContext","createContext","EmojiWeatherMapSelector","Component","constructor","props","super","this","templateBaseUrl","process","state","selectedTemplate","handleChange","bind","event","target","value","selectedMapTemplateURL","setState","_","onMapSelected","componentDidMount","render","isLoadingTemplate","React","createElement","className","htmlFor","disabled","onChange","id","name","EmojiWeatherMapSettings","displayLoadingIcon","Fragment","alt","src","LoadingImage","EmojiWeatherMapOffset","spaces","index","length","push","key","EmojiWeatherMapEmoji","isLoading","currentWeatherIcon","getCurrentWeatherIcon","data","getCurrentWeatherLabel","currentWeatherLabel","dataProviderEndpoint","context","geographicCoordinates","latitude","longitude","onLoading","fetch","then","response","text","onLoaded","role","aria-label","contextType","EmojiWeatherMapRow","row","items","map","item","returnedItem","type","EmojiWeatherMap","template","rows","App","handleLoadingActionStart","handleLoadingActionEnd","handleSelectedMap","emojiWeatherMapTemplate","loadingActionsCount","apiBaseUrl","mapTemplateURL","json","mapView","Provider","href","rel","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cf769bb4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/EmojiWeatherMapEmojiLoading.137847d1.svg\";","import { createContext } from \"react\";\n\nexport const ApiBaseUrlContext = createContext();\n","import React, { Component } from \"react\";\nimport \"../styles/EmojiWeatherMapSelector.scss\";\n\nclass EmojiWeatherMapSelector extends Component {\n  constructor(props) {\n    super(props);\n\n    this.templateBaseUrl = process.env.PUBLIC_URL + \"/templates/\";\n\n    this.state = {\n      selectedTemplate: \"france.json\",\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    const selectedTemplate = event.target.value;\n    const selectedMapTemplateURL = this.templateBaseUrl + selectedTemplate;\n\n    this.setState((_) => {\n      this.props.onMapSelected(selectedMapTemplateURL);\n      return { selectedTemplate };\n    });\n  }\n\n  componentDidMount() {\n    const { selectedTemplate } = this.state;\n    const selectedMapTemplateURL = this.templateBaseUrl + selectedTemplate;\n    this.props.onMapSelected(selectedMapTemplateURL);\n  }\n\n  render() {\n    const { isLoadingTemplate } = this.props;\n\n    return (\n      <div className=\"EmojiWeatherMapSelector\">\n        <div className=\"form-group row\">\n          <label htmlFor=\"mapSelector\" className=\"col-12 col-form-label\">\n            Country\n          </label>\n          <div className=\"col-12\">\n            <select\n              disabled={isLoadingTemplate}\n              value={this.state.selectedTemplate}\n              onChange={this.handleChange}\n              className=\"form-control\"\n              id=\"mapSelector\"\n              name=\"mapSelector\"\n            >\n              <option value=\"france.json\">🇫🇷 France</option>\n            </select>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default EmojiWeatherMapSelector;\n","import React, { Component } from \"react\";\nimport EmojiWeatherMapSelector from \"./EmojiWeatherMapSelector\";\nimport LoadingImage from \"../assets/EmojiWeatherMapEmojiLoading.svg\";\nimport \"../styles/EmojiWeatherMapSettings.scss\";\n\nclass EmojiWeatherMapSettings extends Component {\n  render() {\n    const { displayLoadingIcon, onMapSelected, isLoadingTemplate } = this.props;\n\n    return (\n      <>\n        <div className=\"EmojiWeatherMapSettings\">\n          <h1 className=\"EmojiWeatherMapSettings__AppTitle\">\n            {displayLoadingIcon ? <img alt=\"Loading\" src={LoadingImage} /> : \"\"}{\" \"}\n            Emoji Weather Map\n          </h1>\n          <div className=\"EmojiWeatherMapSettings__SettingsList\">\n            <EmojiWeatherMapSelector\n              onMapSelected={onMapSelected}\n              isLoadingTemplate={isLoadingTemplate}\n            ></EmojiWeatherMapSelector>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default EmojiWeatherMapSettings;\n","import React, { Component } from \"react\";\n\nclass EmojiWeatherMapOffset extends Component {\n  render() {\n    let spaces = [];\n\n    for (let index = 0; index < this.props.length; index++) {\n      spaces.push(\n        <span key={index} className=\"emojiWeatherMap__offsetSpace\">\n          &nbsp;\n        </span>\n      );\n    }\n\n    return spaces;\n  }\n}\n\nexport default EmojiWeatherMapOffset;\n","import React, { Component } from \"react\";\nimport { ApiBaseUrlContext } from \"../Context/ApiBaseUrlContext\";\nimport LoadingImage from \"../assets/EmojiWeatherMapEmojiLoading.svg\";\n\nclass EmojiWeatherMapEmoji extends Component {\n  static contextType = ApiBaseUrlContext;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isLoading: false,\n      currentWeatherIcon: null,\n    };\n  }\n\n  getCurrentWeatherIcon(data) {\n    let currentWeatherIcon;\n    switch (data) {\n      case \"01d\":\n        currentWeatherIcon = \"☀️\";\n        break;\n      case \"01n\":\n        currentWeatherIcon = \"🌕\";\n        break;\n      case \"02d\":\n        currentWeatherIcon = \"🌤️\";\n        break;\n      case \"02n\":\n        currentWeatherIcon = \"☁️\";\n        break;\n      case \"03d\":\n        currentWeatherIcon = \"⛅\";\n        break;\n      case \"03n\":\n        currentWeatherIcon = \"☁️\";\n        break;\n      case \"04d\":\n        currentWeatherIcon = \"☁️\";\n        break;\n      case \"04n\":\n        currentWeatherIcon = \"☁️\";\n        break;\n      case \"09d\":\n        currentWeatherIcon = \"️️🌧️\";\n        break;\n      case \"09n\":\n        currentWeatherIcon = \"🌧️\";\n        break;\n      case \"10d\":\n        currentWeatherIcon = \"️️🌦️\";\n        break;\n      case \"10n\":\n        currentWeatherIcon = \"🌧️\";\n        break;\n      case \"11d\":\n        currentWeatherIcon = \"️️⛈️\";\n        break;\n      case \"11n\":\n        currentWeatherIcon = \"⛈️\";\n        break;\n      case \"13d\":\n        currentWeatherIcon = \"️️🌨️\";\n        break;\n      case \"13n\":\n        currentWeatherIcon = \"🌨️\";\n        break;\n      case \"50d\":\n        currentWeatherIcon = \"️️🌫️\";\n        break;\n      case \"50n\":\n        currentWeatherIcon = \"🌫️\";\n        break;\n\n      default:\n        currentWeatherIcon = \"❌\";\n        break;\n    }\n    return currentWeatherIcon;\n  }\n\n  getCurrentWeatherLabel(data) {\n    let currentWeatherLabel;\n    switch (data) {\n      case \"01d\":\n      case \"01n\":\n        currentWeatherLabel = \"Clear Sky\";\n        break;\n      case \"02d\":\n      case \"02n\":\n        currentWeatherLabel = \"Few Clouds\";\n        break;\n      case \"03d\":\n      case \"03n\":\n        currentWeatherLabel = \"Scattered Clouds\";\n        break;\n      case \"04d\":\n      case \"04n\":\n        currentWeatherLabel = \"Broken Clouds\";\n        break;\n      case \"09d\":\n      case \"09n\":\n        currentWeatherLabel = \"Shower Rain\";\n        break;\n      case \"10d\":\n      case \"10n\":\n        currentWeatherLabel = \"Rain\";\n        break;\n      case \"11d\":\n      case \"11n\":\n        currentWeatherLabel = \"Thunderstorm\";\n        break;\n      case \"13d\":\n      case \"13n\":\n        currentWeatherLabel = \"Snow\";\n        break;\n      case \"50d\":\n      case \"50n\":\n        currentWeatherLabel = \"Mist\";\n        break;\n\n      default:\n        currentWeatherLabel = \"Error\";\n        break;\n    }\n    return currentWeatherLabel;\n  }\n\n  componentDidMount() {\n    this.dataProviderEndpoint =\n      this.context +\n      \"?latitude=\" +\n      this.props.geographicCoordinates.latitude +\n      \"&longitude=\" +\n      this.props.geographicCoordinates.longitude;\n\n    this.setState(() => {\n      this.props.onLoading();\n      return { isLoading: true };\n    });\n\n    fetch(this.dataProviderEndpoint)\n      .then((response) => response.text())\n      .then((data) => {\n        this.setState((state) => {\n          this.props.onLoaded();\n          return {\n            isLoading: false,\n            currentWeatherIcon: this.getCurrentWeatherIcon(data),\n            currentWeatherLabel: this.getCurrentWeatherLabel(data),\n          };\n        });\n      });\n  }\n\n  render() {\n    const { isLoading, currentWeatherIcon, currentWeatherLabel } = this.state;\n\n    if (isLoading) {\n      return (\n        <span\n          className=\"emojiWeatherMap__emojiLoading\"\n          role=\"img\"\n          aria-label=\"Loading\"\n        >\n          <img alt=\"emoji\" src={LoadingImage} />\n        </span>\n      );\n    } else {\n      return (\n        <span\n          className=\"emojiWeatherMap__emoji\"\n          role=\"img\"\n          aria-label={currentWeatherLabel}\n        >\n          {currentWeatherIcon}\n        </span>\n      );\n    }\n  }\n}\n\nexport default EmojiWeatherMapEmoji;\n","import React, { Component } from \"react\";\nimport EmojiWeatherMapOffset from \"./EmojiWeatherMapOffset\";\nimport EmojiWeatherMapEmoji from \"./EmojiWeatherMapEmoji\";\n\nclass EmojiWeatherMapRow extends Component {\n  render() {\n    return (\n      <div className=\"emojiWeatherMap__row\">\n        {this.props.row.items.map((item, index) => {\n          let returnedItem = null;\n          if (item.type === \"offset\") {\n            returnedItem = (\n              <EmojiWeatherMapOffset\n                key={index}\n                length={item.length}\n              ></EmojiWeatherMapOffset>\n            );\n          } else if (item.type === \"emoji\") {\n            returnedItem = (\n              <EmojiWeatherMapEmoji\n                key={index}\n                geographicCoordinates={item.geographicCoordinates}\n                onLoading={this.props.onLoading}\n                onLoaded={this.props.onLoaded}\n              ></EmojiWeatherMapEmoji>\n            );\n          }\n          return returnedItem;\n        })}\n      </div>\n    );\n  }\n}\n\nexport default EmojiWeatherMapRow;\n","import React, { Component } from \"react\";\nimport EmojiWeatherMapRow from \"./EmojiWeatherMapRow\";\n// import EmojiWeatherMapLabel from \"./EmojiWeatherMapLabel\";\nimport \"../styles/EmojiWeatherMap.scss\";\n\nclass EmojiWeatherMap extends Component {\n  render() {\n    return (\n      <>\n        <div className=\"emojiWeatherMap\">\n          {this.props.template.rows.map((row, index) => {\n            return (\n              <EmojiWeatherMapRow\n                key={index}\n                row={row}\n                onLoading={this.props.onLoading}\n                onLoaded={this.props.onLoaded}\n              ></EmojiWeatherMapRow>\n            );\n          })}\n        </div>\n        {/* <EmojiWeatherMapLabel\n          name={this.props.template.name}\n          icon={this.props.template.icon}\n        ></EmojiWeatherMapLabel> */}\n      </>\n    );\n  }\n}\n\nexport default EmojiWeatherMap;\n","import React, { Component } from \"react\";\nimport { ApiBaseUrlContext } from \"./Context/ApiBaseUrlContext\";\nimport EmojiWeatherMapSettings from \"./Components/EmojiWeatherMapSettings\";\nimport EmojiWeatherMap from \"./Components/EmojiWeatherMap\";\nimport \"./styles/App.scss\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleLoadingActionStart = this.handleLoadingActionStart.bind(this);\n    this.handleLoadingActionEnd = this.handleLoadingActionEnd.bind(this);\n    this.handleSelectedMap = this.handleSelectedMap.bind(this);\n\n    this.state = {\n      emojiWeatherMapTemplate: null,\n      isLoadingTemplate: false,\n      loadingActionsCount: 0,\n    };\n\n    this.apiBaseUrl = process.env.REACT_APP_API_BASE_URL;\n  }\n\n  handleLoadingActionStart() {\n    this.setState((state) => {\n      return {\n        loadingActionsCount: state.loadingActionsCount + 1,\n      };\n    });\n  }\n\n  handleLoadingActionEnd() {\n    this.setState((state) => {\n      return {\n        loadingActionsCount: state.loadingActionsCount - 1,\n      };\n    });\n  }\n\n  handleSelectedMap(mapTemplateURL) {\n    this.setState({ isLoadingTemplate: true });\n\n    fetch(mapTemplateURL)\n      .then((response) => response.json())\n      .then((data) => {\n        this.setState({\n          emojiWeatherMapTemplate: data,\n          isLoadingTemplate: false,\n        });\n      });\n  }\n\n  render() {\n    const { emojiWeatherMapTemplate, isLoadingTemplate, loadingActionsCount } =\n      this.state;\n    let mapView;\n\n    if (isLoadingTemplate || !emojiWeatherMapTemplate) {\n      mapView = <p>Loading map...</p>;\n    } else {\n      mapView = (\n        <EmojiWeatherMap\n          template={emojiWeatherMapTemplate}\n          onLoading={this.handleLoadingActionStart}\n          onLoaded={this.handleLoadingActionEnd}\n        ></EmojiWeatherMap>\n      );\n    }\n    return (\n      <ApiBaseUrlContext.Provider value={this.apiBaseUrl}>\n        <div className=\"App\">\n          <div className=\"container\">\n            <div className=\"row align-items-center App__body\">\n              <div className=\"col-12 App__settings\">\n                <EmojiWeatherMapSettings\n                  displayLoadingIcon={loadingActionsCount > 0}\n                  onMapSelected={this.handleSelectedMap}\n                  isLoadingTemplate={isLoadingTemplate}\n                ></EmojiWeatherMapSettings>\n              </div>\n              <div className=\"col-12 App__mapView\">{mapView}</div>\n              <div className=\"col-12 App__footer\">\n                <hr></hr>\n                <p>\n                  2018 - A simple React app made by{\" \"}\n                  <a\n                    href=\"https://www.giovanetti.fr/\"\n                    rel=\"noopener noreferrer\"\n                    target=\"_blank\"\n                  >\n                    Romain Giovanetti\n                  </a>{\" \"}\n                  -{\" \"}\n                  <a\n                    href=\"https://github.com/ganoninc/emojis-weather-map\"\n                    rel=\"noopener noreferrer\"\n                    target=\"_blank\"\n                  >\n                    View source\n                  </a>\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </ApiBaseUrlContext.Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./styles/index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}